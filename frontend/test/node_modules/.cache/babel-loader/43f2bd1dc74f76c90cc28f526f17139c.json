{"ast":null,"code":"var _jsxFileName = \"/home/jan/prog/testNodeApp/frontend/test/src/Components/Navbar.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/*\n\nimport React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport './css/Navbar.css'\n\nfunction Navbar() {\n\n    return(\n        <div class=\"navbar\">\n            <Link to='/dashboard'>\n                <button type=\"button\">Dashboard</button>\n            </Link>\n            <Link to='/admin'>\n                <button type=\"button\">Admin</button>\n            </Link>\n            <Link to='/inventory'>\n                <button type=\"button\">Inventory</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default withRouter(Navbar)\n\n*/\n//---------------------------------\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string'; // Usage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Navbar() {\n  _s();\n\n  // Get the router object\n  const router = useRouter(); // Get value from query string (?postId=123) or route param (/:postId)\n  //console.log(router.query.postId);\n  // Get current pathname\n  //console.log(router.pathname)\n  // Navigate with with router.push()\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: e => router.push('/about'),\n    children: \"About\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n} // Hook\n\n\n_s(Navbar, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Navbar;\nexport function useRouter() {\n  _s2();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n}\n\n_s2(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/home/jan/prog/testNodeApp/frontend/test/src/Components/Navbar.js"],"names":["useMemo","useParams","useLocation","useHistory","useRouteMatch","queryString","Navbar","router","useRouter","e","push","params","location","history","match","replace","pathname","query","parse","search"],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,aAA7C,QAAkE,kBAAlE;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CACA;;;;AACA,SAASC,MAAT,GAAkB;AAAA;;AACd;AACA,QAAMC,MAAM,GAAGC,SAAS,EAAxB,CAFc,CAId;AACA;AACA;AACA;AACA;;AAEA,sBAEI;AAAQ,IAAA,OAAO,EAAGC,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,QAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH,C,CAID;;;GApBSJ,M;UAEUE,S;;;KAFVF,M;AAsBT,OAAO,SAASE,SAAT,GAAqB;AAAA;;AAExB,QAAMG,MAAM,GAAGV,SAAS,EAAxB;AAEA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,OAAO,GAAGV,UAAU,EAA1B;AAEA,QAAMW,KAAK,GAAGV,aAAa,EAA3B,CARwB,CAYxB;AAEA;;AAEA,SAAOJ,OAAO,CAAC,MAAM;AAEjB,WAAO;AAEH;AAEAU,MAAAA,IAAI,EAAEG,OAAO,CAACH,IAJX;AAMHK,MAAAA,OAAO,EAAEF,OAAO,CAACE,OANd;AAQHC,MAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QARhB;AAUH;AAEA;AAEA;AAEAC,MAAAA,KAAK,EAAE,EAEH,GAAGZ,WAAW,CAACa,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CAFA;AAEoC;AAEvC,WAAGR;AAJA,OAhBJ;AAwBH;AAEA;AAEAG,MAAAA,KA5BG;AA8BHF,MAAAA,QA9BG;AAgCHC,MAAAA;AAhCG,KAAP;AAoCH,GAtCa,EAsCX,CAACF,MAAD,EAASG,KAAT,EAAgBF,QAAhB,EAA0BC,OAA1B,CAtCW,CAAd;AAwCH;;IAxDeL,S;UAEGP,S,EAEEC,W,EAEDC,U,EAEFC,a","sourcesContent":["\n/*\n\nimport React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport './css/Navbar.css'\n\nfunction Navbar() {\n\n    return(\n        <div class=\"navbar\">\n            <Link to='/dashboard'>\n                <button type=\"button\">Dashboard</button>\n            </Link>\n            <Link to='/admin'>\n                <button type=\"button\">Admin</button>\n            </Link>\n            <Link to='/inventory'>\n                <button type=\"button\">Inventory</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default withRouter(Navbar)\n\n*/\n\n//---------------------------------\n\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\n// Usage\nfunction Navbar() {\n    // Get the router object\n    const router = useRouter();\n\n    // Get value from query string (?postId=123) or route param (/:postId)\n    //console.log(router.query.postId);\n    // Get current pathname\n    //console.log(router.pathname)\n    // Navigate with with router.push()\n\n    return (\n\n        <button onClick={(e) => router.push('/about')}>About</button>\n\n    );\n\n}\n\n\n\n// Hook\n\nexport function useRouter() {\n\n    const params = useParams();\n\n    const location = useLocation();\n\n    const history = useHistory();\n\n    const match = useRouteMatch();\n\n\n\n    // Return our custom router object\n\n    // Memoize so that a new object is only returned if something changes\n\n    return useMemo(() => {\n\n        return {\n\n            // For convenience add push(), replace(), pathname at top level\n\n            push: history.push,\n\n            replace: history.replace,\n\n            pathname: location.pathname,\n\n            // Merge params and parsed query string into single \"query\" object\n\n            // so that they can be used interchangeably.\n\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n\n            query: {\n\n                ...queryString.parse(location.search), // Convert string to object\n\n                ...params\n\n            },\n\n            // Include match, location, history objects so we have\n\n            // access to extra React Router functionality if needed.\n\n            match,\n\n            location,\n\n            history\n\n        };\n\n    }, [params, match, location, history]);\n\n}"]},"metadata":{},"sourceType":"module"}