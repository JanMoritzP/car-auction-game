{"ast":null,"code":"var _jsxFileName = \"/home/jan/git/car-auction-game/frontend/test/src/Components/Navbar.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\nimport './css/Navbar.css'; // Usage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Navbar() {\n  _s();\n\n  // Get the router object\n  const router = useRouter(); // Get value from query string (?postId=123) or route param (/:postId)\n  //console.log(router.query.postId);\n  // Get current pathname\n  //console.log(router.pathname)\n  // Navigate with with router.push()\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => router.push('/admin'),\n      children: \"Admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => router.push('/inventory'),\n      children: \"Inventory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => router.push('/dashboard'),\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n} // Hook\n\n_s(Navbar, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Navbar;\nexport function useRouter() {\n  _s2();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n}\n\n_s2(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/home/jan/git/car-auction-game/frontend/test/src/Components/Navbar.js"],"names":["useMemo","useParams","useLocation","useHistory","useRouteMatch","queryString","Navbar","router","useRouter","e","push","params","location","history","match","replace","pathname","query","parse","search"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,aAA7C,QAAkE,kBAAlE;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,kBAAP,C,CACA;;;AACA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B;AACA,QAAMC,MAAM,GAAGC,SAAS,EAAxB,CAF6B,CAI7B;AACA;AACA;AACA;AACA;;AAIA,sBACI;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,QAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAGD,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,YAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAGD,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,YAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,C,CACD;;GAtBwBJ,M;UAELE,S;;;KAFKF,M;AAuBxB,OAAO,SAASE,SAAT,GAAqB;AAAA;;AACxB,QAAMG,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAMW,KAAK,GAAGV,aAAa,EAA3B,CAJwB,CAKxB;AACA;;AACA,SAAOJ,OAAO,CAAC,MAAM;AACjB,WAAO;AACH;AACAU,MAAAA,IAAI,EAAEG,OAAO,CAACH,IAFX;AAGHK,MAAAA,OAAO,EAAEF,OAAO,CAACE,OAHd;AAIHC,MAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAJhB;AAKH;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,EACH,GAAGZ,WAAW,CAACa,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CADA;AACoC;AACvC,WAAGR;AAFA,OARJ;AAYH;AACA;AACAG,MAAAA,KAdG;AAeHF,MAAAA,QAfG;AAgBHC,MAAAA;AAhBG,KAAP;AAkBH,GAnBa,EAmBX,CAACF,MAAD,EAASG,KAAT,EAAgBF,QAAhB,EAA0BC,OAA1B,CAnBW,CAAd;AAoBH;;IA3BeL,S;UACGP,S,EACEC,W,EACDC,U,EACFC,a","sourcesContent":["import { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\nimport './css/Navbar.css'\n// Usage\nexport default function Navbar() {\n    // Get the router object\n    const router = useRouter();\n\n    // Get value from query string (?postId=123) or route param (/:postId)\n    //console.log(router.query.postId);\n    // Get current pathname\n    //console.log(router.pathname)\n    // Navigate with with router.push()\n\n    \n\n    return (\n        <div class=\"navbar\">\n            <button onClick={(e) => router.push('/admin')}>Admin</button>\n            <button onClick={(e) => router.push('/inventory')}>Inventory</button>\n            <button onClick={(e) => router.push('/dashboard')}>Dashboard</button>\n        </div>\n\n    );\n\n}\n// Hook\nexport function useRouter() {\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n    // Return our custom router object\n    // Memoize so that a new object is only returned if something changes\n    return useMemo(() => {\n        return {\n            // For convenience add push(), replace(), pathname at top level\n            push: history.push,\n            replace: history.replace,\n            pathname: location.pathname,\n            // Merge params and parsed query string into single \"query\" object\n            // so that they can be used interchangeably.\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n            query: {\n                ...queryString.parse(location.search), // Convert string to object\n                ...params\n            },\n            // Include match, location, history objects so we have\n            // access to extra React Router functionality if needed.\n            match,\n            location,\n            history\n        };\n    }, [params, match, location, history]);\n}"]},"metadata":{},"sourceType":"module"}