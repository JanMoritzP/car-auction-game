{"ast":null,"code":"var _jsxFileName = \"/home/jan/prog/testNodeApp/frontend/test/src/Components/Navbar.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport './css/Navbar.css';\n\nfunction Navbar() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/dashboard\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \"Admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/inventory\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: \"Inventory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Navbar;\nexport default _c2 = withRouter(Navbar); //---------------------------------\n\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string'; // Usage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  // Get the router object\n  const router = useRouter(); // Get value from query string (?postId=123) or route param (/:postId)\n\n  console.log(router.query.postId); // Get current pathname\n\n  console.log(router.pathname); // Navigate with with router.push()\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: e => router.push('/about'),\n    children: \"About\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n} // Hook\n\n\n_s(MyComponent, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c3 = MyComponent;\nexport function useRouter() {\n  _s2();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n}\n\n_s2(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Navbar\");\n$RefreshReg$(_c2, \"%default%\");\n$RefreshReg$(_c3, \"MyComponent\");","map":{"version":3,"sources":["/home/jan/prog/testNodeApp/frontend/test/src/Components/Navbar.js"],"names":["React","withRouter","Link","Navbar","useMemo","useParams","useLocation","useHistory","useRouteMatch","queryString","MyComponent","router","useRouter","console","log","query","postId","pathname","e","push","params","location","history","match","replace","parse","search"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,kBAAjC;AACA,OAAO,kBAAP;;AAEA,SAASC,MAAT,GAAkB;AAEd,sBACI;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,YAAT;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,QAAT;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,YAAT;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;KAfQA,M;AAiBT,qBAAeF,UAAU,CAACE,MAAD,CAAzB,C,CAEA;;AAEA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,aAA7C,QAAkE,kBAAlE;AAEA,OAAOC,WAAP,MAAwB,cAAxB,C,CAIA;;;;AAEA,SAASC,WAAT,GAAsB;AAAA;;AAEpB;AAEA,QAAMC,MAAM,GAAGC,SAAS,EAAxB,CAJoB,CAQpB;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,KAAP,CAAaC,MAAzB,EAVoB,CAcpB;;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACM,QAAnB,EAhBoB,CAoBpB;;AAEA,sBAEE;AAAQ,IAAA,OAAO,EAAGC,CAAD,IAAOP,MAAM,CAACQ,IAAP,CAAY,QAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAMD,C,CAID;;;GAhCST,W;UAIQE,S;;;MAJRF,W;AAkCT,OAAO,SAASE,SAAT,GAAqB;AAAA;;AAE1B,QAAMQ,MAAM,GAAGf,SAAS,EAAxB;AAEA,QAAMgB,QAAQ,GAAGf,WAAW,EAA5B;AAEA,QAAMgB,OAAO,GAAGf,UAAU,EAA1B;AAEA,QAAMgB,KAAK,GAAGf,aAAa,EAA3B,CAR0B,CAY1B;AAEA;;AAEA,SAAOJ,OAAO,CAAC,MAAM;AAEnB,WAAO;AAEL;AAEAe,MAAAA,IAAI,EAAEG,OAAO,CAACH,IAJT;AAMLK,MAAAA,OAAO,EAAEF,OAAO,CAACE,OANZ;AAQLP,MAAAA,QAAQ,EAAEI,QAAQ,CAACJ,QARd;AAUL;AAEA;AAEA;AAEAF,MAAAA,KAAK,EAAE,EAEL,GAAGN,WAAW,CAACgB,KAAZ,CAAkBJ,QAAQ,CAACK,MAA3B,CAFE;AAEkC;AAEvC,WAAGN;AAJE,OAhBF;AAwBL;AAEA;AAEAG,MAAAA,KA5BK;AA8BLF,MAAAA,QA9BK;AAgCLC,MAAAA;AAhCK,KAAP;AAoCD,GAtCa,EAsCX,CAACF,MAAD,EAASG,KAAT,EAAgBF,QAAhB,EAA0BC,OAA1B,CAtCW,CAAd;AAwCD;;IAxDeV,S;UAECP,S,EAEEC,W,EAEDC,U,EAEFC,a","sourcesContent":["import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport './css/Navbar.css'\n\nfunction Navbar() {\n\n    return(\n        <div class=\"navbar\">\n            <Link to='/dashboard'>\n                <button type=\"button\">Dashboard</button>\n            </Link>\n            <Link to='/admin'>\n                <button type=\"button\">Admin</button>\n            </Link>\n            <Link to='/inventory'>\n                <button type=\"button\">Inventory</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default withRouter(Navbar)\n\n//---------------------------------\n\nimport { useMemo } from \"react\";\n\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\n\nimport queryString from 'query-string';\n\n\n\n// Usage\n\nfunction MyComponent(){\n\n  // Get the router object\n\n  const router = useRouter();\n\n\n\n  // Get value from query string (?postId=123) or route param (/:postId)\n\n  console.log(router.query.postId);\n\n\n\n  // Get current pathname\n\n  console.log(router.pathname)\n\n\n\n  // Navigate with with router.push()\n\n  return (\n\n    <button onClick={(e) => router.push('/about')}>About</button>\n\n  );\n\n}\n\n\n\n// Hook\n\nexport function useRouter() {\n\n  const params = useParams();\n\n  const location = useLocation();\n\n  const history = useHistory();\n\n  const match = useRouteMatch();\n\n\n\n  // Return our custom router object\n\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n\n    return {\n\n      // For convenience add push(), replace(), pathname at top level\n\n      push: history.push,\n\n      replace: history.replace,\n\n      pathname: location.pathname,\n\n      // Merge params and parsed query string into single \"query\" object\n\n      // so that they can be used interchangeably.\n\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n\n      query: {\n\n        ...queryString.parse(location.search), // Convert string to object\n\n        ...params\n\n      },\n\n      // Include match, location, history objects so we have\n\n      // access to extra React Router functionality if needed.\n\n      match,\n\n      location,\n\n      history\n\n    };\n\n  }, [params, match, location, history]);\n\n}"]},"metadata":{},"sourceType":"module"}