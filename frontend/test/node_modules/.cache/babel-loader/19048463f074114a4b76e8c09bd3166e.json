{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\nexport default function useRouter() {\n  _s();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n}\n\n_s(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});","map":{"version":3,"sources":["/home/jan/git/car-auction-game/frontend/test/src/Functions/useRouter.js"],"names":["useMemo","useParams","useLocation","useHistory","useRouteMatch","queryString","useRouter","params","location","history","match","push","replace","pathname","query","parse","search"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,aAA7C,QAAkE,kBAAlE;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAChC,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,KAAK,GAAGN,aAAa,EAA3B,CAJgC,CAKhC;AACA;;AACA,SAAOJ,OAAO,CAAC,MAAM;AACjB,WAAO;AACH;AACAW,MAAAA,IAAI,EAAEF,OAAO,CAACE,IAFX;AAGHC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OAHd;AAIHC,MAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAJhB;AAKH;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,EACH,GAAGT,WAAW,CAACU,KAAZ,CAAkBP,QAAQ,CAACQ,MAA3B,CADA;AACoC;AACvC,WAAGT;AAFA,OARJ;AAYH;AACA;AACAG,MAAAA,KAdG;AAeHF,MAAAA,QAfG;AAgBHC,MAAAA;AAhBG,KAAP;AAkBH,GAnBa,EAmBX,CAACF,MAAD,EAASG,KAAT,EAAgBF,QAAhB,EAA0BC,OAA1B,CAnBW,CAAd;AAoBH;;GA3BuBH,S;UACLL,S,EACEC,W,EACDC,U,EACFC,a","sourcesContent":["import { useMemo } from \"react\";\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\n\nexport default function useRouter() {\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n    // Return our custom router object\n    // Memoize so that a new object is only returned if something changes\n    return useMemo(() => {\n        return {\n            // For convenience add push(), replace(), pathname at top level\n            push: history.push,\n            replace: history.replace,\n            pathname: location.pathname,\n            // Merge params and parsed query string into single \"query\" object\n            // so that they can be used interchangeably.\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n            query: {\n                ...queryString.parse(location.search), // Convert string to object\n                ...params\n            },\n            // Include match, location, history objects so we have\n            // access to extra React Router functionality if needed.\n            match,\n            location,\n            history\n        };\n    }, [params, match, location, history]);\n}"]},"metadata":{},"sourceType":"module"}